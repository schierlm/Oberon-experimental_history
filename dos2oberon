#!/usr/bin/perl
#
# dos2oberon  -- convert a DOS file (CR + LF as line ending) to an Oberon file (only CR as line endings)
#
# Sample workflow:
#   1) git pull                                  (pull repository from remote server)
#   2) git --hard reset                          (update local working directory)
#   3) ./dos2oberon File.Mod File.Mod            (convert file to Oberon-style)
#   4) ./pcreceive.sh File.Mod                   (import this file into Oberon)
#
#   Converting a file from Oberon-style (uses only CR as line endings) to DOS-style (uses CRLF as line
#   endings) ensures that the file can be properly displayed on web sites such as www.github.com.
#
#   In addition:
#   - two spaces at the beginning of a line are converted to a TAB
#   - two spaces in front of Oberon comments enclosed by (* and *) are converted to a TAB.
#
# See also:
#   oberon2dos   (converts an Oberon file back to DOS format)
#
# Notes:
#   CR  = 13 (decimal) = 0D (hex) = 15C (octal) = \r (Perl) 
#   LF  = 10 (decimal) = 0A (hex) = 12C (octal) = \n (Perl)
#   TAB = 09 (decimal) = 09 (hex) = 11C (octal) = \t (Perl)
#   SUB = 26 (decimal) = 1A (hex) = 32C (octal) = ?  (Perl)
#
#   We use Perl, because on some host systems (e.g., MacOS), the corresponding sed command does not work
#
# Author: Andreas Pirklbauer
#

# quit unless we have the correct number of command line arguments
$num_args = $#ARGV + 1;
if ($num_args != 2) {
    print "Usage: dos2oberon inputfile outputfile\n";
    exit;
}

# get the two command line arguments
$inputfile=$ARGV[0];
$outputfile=$ARGV[1];

open(FILE, "$inputfile") || die "inputfile not found";
my @lines = <FILE>;
close(FILE);

my $x = "  " ;    # 2 spaces
my $y = "\t" ;    # 1 TAB

my @newlines;
foreach(@lines) {
    # convert all CRLF (\r\n) to CR (\r) only, so we ONLY have CR in the file afterwards
    $_ =~ s/\r\n/\r/g;

    # replace two spaces with a TAB (\t)
    # $_ =~ s/  /\t/g;     # this could cause trouble, e.g. inside a string

    # replace two spaces with one TAB (\t), but only at the beginning of a line
    while ($_ =~ s/^($y*)$x/$1$y/) {}

    # replace 2 spaces before a comment by a TAB
    $_ =~ s/$x(\(\*.*\**\))/$y$1/g;       

    # push outline line
    push(@newlines,$_);
}

open(FILE, ">$outputfile") || die "File not found";
print FILE @newlines;
close(FILE);

